set nocompatible

"""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""
call plug#begin('~/.vim/bundle')

" Load vundle plugins
" Plug 'scrooloose/syntastic'
Plug 'Chiel92/vim-autoformat'
Plug 'Raimondi/delimitMate'
Plug 'Valloric/ListToggle'
Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'bronson/vim-trailing-whitespace'
Plug 'chriskempson/base16-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dantler/vim-alternate'
Plug 'dense-analysis/ale'
Plug 'ervandew/supertab'
Plug 'jremmen/vim-ripgrep'
Plug 'jreybert/vimagit'
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-operator-user'
Plug 'kana/vim-textobj-user'
Plug 'kien/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'mhinz/vim-startify'
Plug 'michaeljsmith/vim-indent-object'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'osyo-manga/vim-over'
Plug 'rhysd/clever-f.vim'
Plug 'rhysd/conflict-marker.vim'
Plug 'sheerun/vim-polyglot'
Plug 'sjl/gundo.vim'
Plug 'tmhedberg/SimpylFold'
Plug 'tmux-plugins/vim-tmux'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'unblevable/quick-scope'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'vim-scripts/argtextobj.vim'
Plug 'vim-test/vim-test'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'chriskempson/base16-vim'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

"""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""
syntax on
filetype plugin indent on
set number
set incsearch
set cindent
set ignorecase
set smartcase
set ruler
set magic
set showmatch

set noerrorbells
set novisualbell

set encoding=utf8
set ffs=unix
set updatetime=300

set nobackup
set nowritebackup
set noswapfile

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set ai
set si

set laststatus=2
set notitle

" set foldmethod=indent
set nofoldenable " disable default folding
" set foldnestmax=1

" Save when losing focus
set autowriteall " Auto-save files when switching buffers or leaving vim.
au FocusLost * silent! :wa
au TabLeave * silent! :wa

set splitright

set sessionoptions+=resize,winpos
set exrc
set secure
set wrap
set linebreak
set mouse=a
set clipboard=unnamed
set hidden
set diffopt+=vertical

set wildignore+=*/.git/*,*/tmp/*,*.swp,*.pyc

"""""""""""""""""""""""""""
" Plugin-Specific
"""""""""""""""""""""""""""

" Airline
let g:airline_theme='gruvbox'
let g:airline_symbols_ascii = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#coc#show_coc_status = 1

" Colorscheme
try
    set termguicolors
    set background=dark
    colorscheme gruvbox
    " let base16colorspace=256  " Access colors present in 256 colorspace"
    " colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    " In case it doesn't exist, fall back to default
    " (Before PlugInstall)
    colorscheme default
endtry


" CtrlP
let g:ctrlp_working_path_mode = 'ra'
if executable('rg')
    set grepprg=rg\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
endif
let g:ctrlp_cmd = 'exe "CtrlP".get(["Buffer", "", "MRU"], v:count)'

" Tex
let g:ycm_semantic_triggers = {
            \  'tex'  : ['\ref{','\cite{'],
            \ }

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'

" VimMove
" let g:move_key_modifier = 'D'

" VimSession
" Prevent vim-session from asking us to load the session.
" If you want to load the session, use :SaveSession and :OpenSession
let g:session_autosave = 'no'
" let g:session_autosave_periodic = '5'
let g:session_autoload = 'no'

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf'
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_semantic_triggers = {
            \ 'c' : ['->', '.'],
            \ }

" Quickscope
let g:qs_enable = 0
let g:qs_enable_char_list = [ 'f', 'F', 't', 'T'  ]

function! Quick_scope_selective(movement)
    let needs_disabling = 0
    if !g:qs_enable
        QuickScopeToggle
        redraw
        let needs_disabling = 1
    endif
    let letter = nr2char(getchar())
    if needs_disabling
        QuickScopeToggle
    endif
    return a:movement . letter
endfunction

for i in g:qs_enable_char_list
    execute 'noremap <expr> <silent>' . i . " Quick_scope_selective('". i . "')"
endfor

" Easytags
let g:easytags_async = 1
let g:easytags_suppress_ctags_warning = 1

" ROS
let g:ros_make = 'current'
let g:ros_build_system = 'catkin-tools'
let g:ros_catkin_make_options = '-DCMAKE_BUILD_TYPE=Debug'

" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" DelimitMate
let delimitMate_balance_matchpairs = 1

" Vimagit
let g:magit_show_help=0

" Simplyfold
let g:SimpylFold_docstring_preview = 1

" Emmet.vim
let g:user_emmet_settings = {
            \  'javascript' : {
                \      'extends' : 'jsx,tsx',
                \  },
                \}
let g:user_emmet_mode='a'

" netrw
let g:netrw_liststyle = 3
let g:netrw_banner = 0

" startify
let g:startify_custom_header = startify#fortune#boxed()

let g:ale_fixers = {
            \   'javascript': [
                \       'prettier'
                \   ],
                \   'typescript': [
                    \       'prettier'
                    \   ],
                    \   'python' : [
                        \       'isort',
                        \       'black'
                        \   ]
                        \}

"""""""""""""""""""""""""""
" Keymaps
"""""""""""""""""""""""""""
let mapleader = ","
inoremap kj <Esc>
cnoremap kj <Esc>

" Normal mode

" Window navigation
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>

" fugitive.git
nnoremap <silent> ,dg :diffget<CR>
nnoremap <silent> ,dp :diffput<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign))

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit --verbose<CR>
nnoremap <silent> <leader>gam :Gcommit --verbose --amend<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gbr :Git branch<CR>

nnoremap <leader>ma :Make<CR>

nnoremap <leader>gu :GundoToggle<CR>

map <leader>af :Autoformat<CR>
noremap <leader>af :Autoformat<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>t :CtrlPTag<CR>

" Coc.vim
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Insert Mode

" Coc.vim
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

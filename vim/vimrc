set nocompatible

"""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""
  call plug#begin('~/.vim/bundle')
  " Load vundle plugins
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-unimpaired'
  Plug 'kien/ctrlp.vim'
  Plug 'dantler/vim-alternate'
  Plug 'Raimondi/delimitMate'
  Plug 'itchyny/lightline.vim'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'vim-scripts/argtextobj.vim'
  Plug 'kana/vim-textobj-user'
  Plug 'tomtom/tcomment_vim'
  Plug 'kana/vim-operator-user'
  Plug 'vim-scripts/DoxygenToolkit.vim'
  Plug 'xolox/vim-misc'
  Plug 'xolox/vim-easytags'
  Plug 'altercation/vim-colors-solarized'
  Plug 'chriskempson/base16-vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'Valloric/ListToggle'
  Plug 'octol/vim-cpp-enhanced-highlight'
  Plug 'ervandew/supertab'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'tmux-plugins/vim-tmux'
  Plug 'SirVer/ultisnips'
  Plug 'Valloric/YouCompleteMe'
  Plug 'unblevable/quick-scope'
  Plug 'junegunn/vim-easy-align'
  Plug 'bronson/vim-trailing-whitespace'
  Plug 'sjl/gundo.vim'
  " Plug 'scrooloose/syntastic'
  Plug 'rhysd/conflict-marker.vim'
  Plug 'osyo-manga/vim-over'
  Plug 'jreybert/vimagit'
  Plug 'Chiel92/vim-autoformat', { 'branch': 'dev' }
  Plug 'mhinz/vim-startify'
  Plug 'rhysd/clever-f.vim'
  Plug 'tmhedberg/SimpylFold'

  call plug#end()

"""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""
syntax on
filetype plugin indent on
set number
set incsearch
set cindent
set ignorecase
set smartcase
set ruler
set magic
set showmatch

set noerrorbells
set novisualbell

set encoding=utf8
set ffs=unix

set nobackup
set nowb
set noswapfile

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set ai
set si

set laststatus=2
set notitle

" set foldmethod=indent
set nofoldenable " disable default folding
" set foldnestmax=1

" Save when losing focus
set autowriteall " Auto-save files when switching buffers or leaving vim.
au FocusLost * silent! :wa
au TabLeave * silent! :wa

set splitright

set sessionoptions+=resize,winpos
set exrc
set secure
set wrap
set linebreak
set mouse=a
set clipboard=unnamed
set hidden
set diffopt+=vertical

set wildignore+=*/.git/*,*/tmp/*,*.swp,*.pyc

"""""""""""""""""""""""""""
" Plugin-Specific
"""""""""""""""""""""""""""

" Lightline
let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ 'active': {
  \   'left': [ [ 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
  \   'right': [ [ 'syntastic', 'lineinfo', 'percent'], [ 'filetype' ] ]
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'filename': 'LightLineFilename',
  \   'fileformat': 'LightLineFileformat',
  \   'filetype': 'LightLineFiletype',
  \   'fileencoding': 'LightLineFileencoding',
  \   'mode': 'LightLineMode',
  \   'ctrlpmark': 'CtrlPMark',
  \ },
  \ 'component_expand': {
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_type': {
  \   'syntastic': 'error',
  \ },
  \ 'subseparator': { 'left': '|', 'right': '|' }
  \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

" augroup AutoSyntastic
"   autocmd!
"   autocmd BufWritePost *.c,*.cpp call s:syntastic()
" augroup END
" function! s:syntastic()
"   SyntasticCheck
"   call lightline#update()
" endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" Colorscheme
try
    colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    " In case it doesn't exist, fall back to default
    " (Before PlugInstall)
    colorscheme default
endtry

" let base16colorspace=256  " Access colors present in 256 colorspace"
set background=dark

" CtrlP
let g:ctrlp_working_path_mode = 'ra'
if executable('rg')
    set grepprg=rg\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
endif
let g:ctrlp_cmd = 'exe "CtrlP".get(["Buffer", "", "MRU"], v:count)'

" Tex
let g:ycm_semantic_triggers = {
\  'tex'  : ['\ref{','\cite{'],
\ }

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'

" VimMove
" let g:move_key_modifier = 'D'

" VimSession
" Prevent vim-session from asking us to load the session.
" If you want to load the session, use :SaveSession and :OpenSession
let g:session_autosave = 'no'
" let g:session_autosave_periodic = '5'
let g:session_autoload = 'no'

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf'
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_semantic_triggers = {
\ 'c' : ['->', '.'],
\ }

" Quickscope
let g:qs_enable = 0
let g:qs_enable_char_list = [ 'f', 'F', 't', 'T'  ]

function! Quick_scope_selective(movement)
let needs_disabling = 0
if !g:qs_enable
  QuickScopeToggle
  redraw
  let needs_disabling = 1
endif
let letter = nr2char(getchar())
if needs_disabling
  QuickScopeToggle
endif
return a:movement . letter
endfunction

for i in g:qs_enable_char_list
execute 'noremap <expr> <silent>' . i . " Quick_scope_selective('". i . "')"
endfor

" Easytags
let g:easytags_async = 1
let g:easytags_suppress_ctags_warning = 1

" ROS
let g:ros_make = 'current'
let g:ros_build_system = 'catkin-tools'
let g:ros_catkin_make_options = '-DCMAKE_BUILD_TYPE=Debug'

" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" DelimitMate
let delimitMate_balance_matchpairs = 1

" Vimagit
let g:magit_show_help=0

" Simplyfold
let g:SimpylFold_docstring_preview = 1

"""""""""""""""""""""""""""
" Keymaps
"""""""""""""""""""""""""""
let mapleader = ","
inoremap kj <Esc>
cnoremap kj <Esc>

" Normal mode

" NerdTree
" nmap <silent> <F3> <plug>NERDTreeTabsToggle<CR>

" tComment
" comment paragraph
" nmap <silent> gcp <c-_>p

" Window navigation
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>

" Ag
" nmap <leader>ag :Ag ""<Left>
" nmap <leader>af :AgFile ""<Left>

" fugitive.git
nnoremap <silent> ,dg :diffget<CR>
nnoremap <silent> ,dp :diffput<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign))

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit --verbose<CR>
nnoremap <silent> <leader>gam :Gcommit --verbose --amend<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gbr :Git branch<CR>

nnoremap <leader>ma :Make<CR>

nnoremap <leader>gu :GundoToggle<CR>

map <leader>af :Autoformat<CR>
noremap <leader>af :Autoformat<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>t :CtrlPTag<CR>

" Insert Mode

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"


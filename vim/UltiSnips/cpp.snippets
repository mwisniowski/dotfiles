snippet tem "Template" b
template< typename ${1:T} >
endsnippet

snippet tn "Typename"
typename ${1:T}
endsnippet

snippet fori "For loop over i" b
for( ${1:size_t} ${2:i} = ${3:0}; $2 < ${4:count}; $2++ ) {
	$5
}
endsnippet

snippet forit "For loop iterator" b
for( $3
		${2:it} = ${1:container.}begin(); $2 != $1end(); ++$2 ) {
	$4
}
endsnippet

snippet fora "For each loop" b
for( ${1:auto&} $2 : $3 ) {
	$4
}
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}
endsnippet

snippet Inc "global include" b
#include <${1:`!p snip.rv = snip.basename + '.h'`}
endsnippet

snippet ifndef "ifndef" b
#ifndef ${1:VAR}
#define $1

$2

#endif
endsnippet

snippet cl "class" b
class ${1:class_name}
{
	public:
		$1()
		{}

		$1( const $1& other )
		{
			*this = other;
		}

		virtual ~$1()
		{}

		$1& operator=( const $1& other )
		{
			if( this != &other )
			{
				// TODO
			}
			return *this;
		}

	private:
		$2
};
endsnippet

snippet main "Main function" b
int main(int argc, char *argv[])
{
	$1
	return 0;
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

